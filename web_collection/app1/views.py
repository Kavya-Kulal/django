from django.shortcuts import render
from django.http import JsonResponse
from django.shortcuts import render
from .models import Collection
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_protect
from django.middleware.csrf import get_token
import json
from .models import Urls, Collection


# Create your views here.
def home(request):

    return render(request, "app1/index.html")




def create_collection(request):
    if request.method == "POST":
        print("Request POST data:", request.POST) 
        collection_name = request.POST.get("collection_name")

        if collection_name:
            collection, created = Collection.objects.get_or_create(collection_name=collection_name)

            return JsonResponse({
                "success": True,
                "collection_id": collection.collection_id,   # Auto-generated by Django
                "collection_name": collection.collection_name,
            })
    
    return JsonResponse({"success": False, "error": "Invalid request"})


def get_collections(request):
    
    
    collections = list(Collection.objects.values("collection_id", "collection_name"))  # Include ID in response
    return JsonResponse({"collections": collections})

@csrf_exempt



def save_bookmark(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            collection_id = data.get("collection_id")
            url = data.get("url")

            if not collection_id or not url:
                return JsonResponse({"error": "Missing collection_id or URL"}, status=400)

            # Convert collection_id to an integer
            try:
                collection_id = int(collection_id)
            except ValueError:
                return JsonResponse({"error": "Invalid collection_id. Must be a number."}, status=400)

            # Fetch the Collection instance
            collection = Collection.objects.get(collection_id=collection_id)

            # Create and save the Urls object
            Urls.objects.create(collection_id=collection, url_id=url)  # Assign Collection instance

            return JsonResponse({"message": "Bookmark saved successfully"})

        except Collection.DoesNotExist:
            return JsonResponse({"error": "Collection not found"}, status=404)
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)

    return JsonResponse({"error": "Invalid request method"}, status=400)

def get_bookmarks(request,collection_id):
    bookmark=Urls.objects.filter(collection_id=collection_id).values("url_id")
    return JsonResponse({"bookmarks":list(bookmark)})
    
    

